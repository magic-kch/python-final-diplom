"""
Django settings for orders project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys
import re

from django.conf.global_settings import DEFAULT_FROM_EMAIL
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k&&$+6=+xn@$9n_@t5dvy)1)i@1r)q+fog!w%(z1td(4h8coj%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']


# Application definition

INSTALLED_APPS = [
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_rest_passwordreset',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_spectacular',
    'backend',
    'rollbar',
    'cachalot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'orders.rollbar_middleware.CustomRollbarNotifierMiddleware',  # Используем кастомный middleware
]

ROOT_URLCONF = 'orders.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'orders.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql_psycopg2'),
        'NAME': os.getenv('DB_NAME', 'netology_pd_diplom'),
        'USER': os.getenv('DB_USER', 'diplom_user'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'pg_postgres'),
        'HOST': os.getenv('DB_HOST', 'postgres'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 10},
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
# модель пользователя
AUTH_USER_MODEL = 'backend.User'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# для отладки в консоли
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.mail.ru')

EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'magic.diplom@mail.ru')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.getenv('EMAIL_PORT', '465')
# EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', False) # EMAIL_PORT = 587
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', True) # EMAIL_PORT = 465
# адрес для отправки системных сообщений
SERVER_EMAIL = EMAIL_HOST_USER

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 40,

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),

    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'auth': '5/hour',  # уменьшаем лимит для тестов
        'basket': '5/day',  # уменьшаем лимит для тестов
        'orders': '5/day',  # уменьшаем лимит для тестов
    },

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),

    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Отключаем throttling в тестовой среде
if 'test' in sys.argv:
    REST_FRAMEWORK['DEFAULT_THROTTLE_CLASSES'] = []

# DRF Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Дипломный проект профессии «Python-разработчик: расширенный курс»',
    'DESCRIPTION': 'Backend-приложение для автоматизации закупок',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/v1/',
    'SCHEMA_COERCE_PATH_PK_SUFFIX': False,
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'SCHEMA_FILE_NAME': 'api_schema.json',  # Имя файла для схемы
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'ENUM_NAME_OVERRIDES': {},
    'ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE': False,
}

# JET settings
JET_DEFAULT_THEME = 'light-gray'
JET_SIDE_MENU_COMPACT = True
# JET_INDEX_DASHBOARD = 'jet.dashboard.dashboard.DefaultIndexDashboard'
# JET_APP_INDEX_DASHBOARD = 'jet.dashboard.dashboard.DefaultAppIndexDashboard'
JET_INDEX_DASHBOARD = 'backend.dashboard.CustomIndexDashboard'
JET_APP_INDEX_DASHBOARD = 'backend.dashboard.CustomAppIndexDashboard'
JET_MODULE_YANDEX_METRIKA_CLIENT_ID = ''
JET_MODULE_YANDEX_METRIKA_CLIENT_SECRET = ''
JET_MODULE_GOOGLE_ANALYTICS_CLIENT_SECRETS_FILE = ''

# Rollbar настройки
ROLLBAR = {
    'access_token': os.getenv('ROLLBAR_ACCESS_TOKEN', 'be75b34451f14b46b669b69608f1f1f8'),
    'environment': 'development' if DEBUG else 'production',
    'code_version': '1.0',
    'root': BASE_DIR,
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'rollbar': {
            'level': 'ERROR',
            'class': 'rollbar.logger.RollbarHandler',
            'access_token': os.getenv('ROLLBAR_ACCESS_TOKEN', 'be75b34451f14b46b669b69608f1f1f8'),
            'environment': 'production' if not DEBUG else 'development',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'rollbar'],
            'level': 'INFO',
        },
        'celery': {
            'handlers': ['console', 'rollbar'],
            'level': 'INFO',
        },
    },
}

# Настройки кеширования
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'IGNORE_EXCEPTIONS': True,
        }
    }
}

# Настройки cachalot
CACHALOT_ENABLED = True
CACHALOT_TIMEOUT = 60 * 60 * 24  # 24 часа
CACHALOT_CACHE = 'default'
CACHALOT_UNCACHABLE_TABLES = (
    'django_migrations',
    'django_admin_log',
)

# Настройки для отладки
if DEBUG:
    DEBUG_TOOLBAR_PANELS = [
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'cachalot.panels.CachalotPanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
    ]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/1'
